// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© capissimo

//@version=5
indicator('JMA Clone (v.3)', 'JMA-3', false)

// The clone of Jurik Movine average function
// inspired by LazyBear's solution (https://www.tradingview.com/script/XzcIRUHv-JMA-RSX-Clone-LazyBear/)
// Added power parameter.

//-- Inputs

Dataset = input.source(close, 'Dataset')
Window  = input.int   (14,    'Period',           2)
Pow     = input.int   (5,     'Power Parameter',  1)
Smooth  = input.int   (20,    'Smoothing Factor', 1)

//-- Functions

JSmoothP(float x, int p, int power) =>
    float tmp0 = 0.0, float tmp1 = 0.0, float tmp2 = 0.0, float tmp3 = 0.0, float tmp4 = 0.0
    float xna   = nz(x[1], x[2])
    float beta  = 0.45 * (p - 1) / (0.45 * (p-1) + 2)
    float alpha = math.pow(beta, power)
    tmp4 := xna
	tmp0 := xna
	tmp2 := xna  
    tmp0 := (1-alpha) * x + alpha * nz(tmp0[1])
    tmp1 := (x - tmp0) * (1-beta) + beta * nz(tmp1[1])
    tmp2 := tmp0 + tmp1
    tmp3 := (tmp2 - nz(tmp4[1])) * math.pow((1-alpha), 2) + math.pow(alpha, 2) * nz(tmp3[1])
    tmp4 := nz(tmp4[1]) + tmp3  
    tmp4

//-- Logic

rsi  = ta.rsi(Dataset, Window)
data = JSmoothP(rsi, Smooth, Pow)

//-- Visuals

hline(70, '', color.red)
hline(30, '', color.green)
hline(50)
plot(data, '', color.navy, 2)
plot(rsi,  '', color.blue, 1)
